package util;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Random;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;

import sto.STO_1Core;

import lda.LDACore;

public class Classification {

	public static void main(String [] args) throws Exception {
		int numSenti = 2;
		String inputDir = null;
		String outputDir = null;
		String dicDir = null;
		
		String sentiFilePrefix = "SentiWords-";
		String wordListFileName = "WordList.txt";
		String docListFileName = "DocumentList.txt";
		String wordDocFileName = "BagOfSentences.txt";
		String polarityFileName = "Polarity.txt";
		
		/*** Options ***/
		for (int i = 0; i < args.length/2; i++) {
			String option = args[2*i];
			String value = args[2*i+1];
			if (option.equals("-s")) numSenti = Integer.valueOf(value);
			else if (option.equals("-d")) inputDir = value.replaceAll("\\\\", "/").replaceAll("/$", "");
			else if (option.equals("-o")) outputDir = value.replaceAll("\\\\", "/").replaceAll("/$", "");
			else if (option.equals("-dic")) dicDir = value.replaceAll("\\\\", "/").replaceAll("/$", "");
		}
		if (inputDir == null) inputDir = ".";
		if (outputDir == null) outputDir = new String(inputDir);
		if (dicDir == null) dicDir = new String(inputDir);

		// Exceptions
		if (!new File(inputDir).exists()) throw new Exception("There's no such an input directory as " + inputDir);
		if (!new File(outputDir).exists()) throw new Exception("There's no such an output directory as " + outputDir);
		if (!new File(dicDir).exists()) throw new Exception("Tehre's no such a dictionary directory as " + dicDir);
		
		
		String line;
		
		Vector<String> wordList = new Vector<String>();
		BufferedReader wordListFile = new BufferedReader(new FileReader(new File(inputDir+"/"+wordListFileName)));
		while ((line = wordListFile.readLine()) != null)
			if (line != "") wordList.add(line);
		wordListFile.close();
		
		Vector<OrderedDocument> documents = OrderedDocument.instantiateOrderedDocuments(inputDir+"/"+wordDocFileName, null, null);
		
		System.out.println("Documents: "+documents.size());
		System.out.println("Unique Words: "+wordList.size());

		ArrayList<TreeSet<String>> sentiWordsStrList = new ArrayList<TreeSet<String>>();
		for (int s = 0; s < numSenti; s++) {
			String dicFilePath = dicDir + "/" + sentiFilePrefix+s+".txt"; 
			if (new File(dicFilePath).exists()) {
				sentiWordsStrList.add(Utility.makeSetOfWordsFromFile(dicFilePath, true));
			}
		}
		
		ArrayList<TreeSet<Integer>> sentiWordsList = new ArrayList<TreeSet<Integer>>(sentiWordsStrList.size());
		for (Set<String> sentiWordsStr : sentiWordsStrList) {
			TreeSet<Integer> sentiWords = new TreeSet<Integer>();
			for (String word : sentiWordsStr)
				sentiWords.add(wordList.indexOf(word));
			sentiWordsList.add(sentiWords);
		}
		
		// Print the configuration
		System.out.println("Documents: "+documents.size());
		System.out.println("Unique Words: "+wordList.size());
		System.out.println("Sentiments: "+numSenti+" (dictionary: "+sentiWordsList.size()+")");
		System.out.println("Input Dir: "+inputDir);
		System.out.println("Dictionary Dir: "+dicDir);
		System.out.println("Output Dir: "+outputDir);

		
		// Classification
		for (int trial = 0; trial < 30; trial++) {
//			System.out.println("== Trial "+trial + " ==");
			
			Random random = new Random(System.currentTimeMillis());
			Vector<Integer> classification = new Vector<Integer>();
			for (OrderedDocument doc : documents) {
				int [] sentiCntDoc = new int[2];
				for (Sentence sentence : doc.getSentences()) {
					int [] sentiCntSentence = new int[2];
					for (Word word : sentence.getWords()) {
						for (int s = 0; s < sentiWordsList.size(); s++) {
							if (sentiWordsList.get(s).contains(word.wordNo)) sentiCntSentence[s]++;
						}
					}
					
					if (sentiCntSentence[0] == 0 || sentiCntSentence[1] == 0 || sentiCntSentence[0] != sentiCntSentence[1]) {
						if (sentiCntSentence[0] > sentiCntSentence[1]) sentiCntDoc[0]++;
						else if (sentiCntSentence[1] > sentiCntSentence[0]) sentiCntDoc[1]++;
					}
				}
				if (sentiCntDoc[0] == sentiCntDoc[1]) classification.add(1);
				else if (sentiCntDoc[0] > sentiCntDoc[1]) classification.add(0);
				else classification.add(1);
			}
			
			int correct = 0, cntNEU = 0;
			BufferedReader polarityFile = new BufferedReader(new FileReader(new File(inputDir+"/"+polarityFileName)));
			for (int classifiedSenti : classification) {
				assert (classifiedSenti == 0 || classifiedSenti == 1);
				int realSenti = Integer.valueOf(polarityFile.readLine());
				if (classifiedSenti == realSenti) correct++; 
				if (realSenti == 2) cntNEU++;
			}
			polarityFile.close();
			System.out.println("Correct: "+correct+" / "+classification.size()+" (NEU: "+cntNEU+")");
			System.out.println("Accuracy: "+((double)correct/documents.size()));
//			System.out.println("Accuracy w/o neutral: "+((double)correct/(documents.size()-cntNEU)));
			System.out.println(((double)correct/(documents.size()-cntNEU)));
		}
	}
}
