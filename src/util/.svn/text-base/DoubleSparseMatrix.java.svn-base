package util;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.Vector;

public class DoubleSparseMatrix extends SparseMatrix{
	private int numOfRow;
	private int numOfColumn;
	private HashMap<Integer, Double>[] row;

	@SuppressWarnings("unchecked")
	public DoubleSparseMatrix(int numOfRow, int numOfColumn){
		this.numOfRow = numOfRow;
		this.numOfColumn = numOfColumn;
		row = new HashMap[numOfRow];
		for(int i=0; i<numOfRow; i++){
			row[i] = new HashMap<Integer, Double>();
		}
	}
	
	public DoubleSparseMatrix(int numOfRow, int numOfColumn, String file) throws Exception {
		initialize(numOfRow, numOfColumn, file);
	}
	
	public DoubleSparseMatrix(String file) throws Exception {
		int size[] = super.getSize(file);
		initialize(size[0], size[1], file);
	}

	// import matrix from file
	@SuppressWarnings("unchecked")
	private void initialize(int numOfRow, int numOfColumn, String file) throws Exception {
		String line;
		double value;
		int lineNumber=0;
		this.numOfRow = numOfRow;
		this.numOfColumn = numOfColumn;
		row = new HashMap[numOfRow];
		for(int i=0; i<numOfRow; i++){
			row[i] = new HashMap<Integer, Double>();
		}
		BufferedReader fileReader = new BufferedReader(new FileReader(file));
	    while((line = fileReader.readLine()) != null){
	    	String[] elements = line.split("[\\s+]|[,]");
	    	for(int j=0; j<elements.length;j++){
				if(( value = Double.valueOf(elements[j]) ) !=0 && j<numOfColumn){
	    			row[lineNumber].put(j, value);
	    		}
	    	}
	    	lineNumber++;
	    }
	    fileReader.close();
	}
	
	public int getNumOfRow() {
		return numOfRow;
	}

	public int getNumOfColumn() {
		return numOfColumn;
	}

	
	// set value of matrix(rowIdx, colIdx) to value
	public void setValue(int rowIdx, int colIdx, double value){
		if(value == 0){
			row[rowIdx].remove(colIdx);
		}
		row[rowIdx].put(colIdx, value);		
		
	}
	
	// get value of matrix(rowIdx, colIdx)
	public double getValue(int rowIdx, int colIdx){
		if (row[rowIdx].containsKey(colIdx)){
			return row[rowIdx].get(colIdx);
		}
		return 0;
	}
	
	// get sum of row elements
	public double getRowSum(int rowIdx){
		double sum=0;
		Set<Integer> keys =  row[rowIdx].keySet();
		
		Iterator<Integer> iter = keys.iterator();
		
		while(iter.hasNext()){
			sum+=row[rowIdx].get(iter.next());
		}
		return sum;
	}
	
	// get sum of column elements
	public double getColSum(int colIdx){
		if(colIdx > numOfColumn){
			return 0;
		}
		double sum=0;
		for(int i=0; i<numOfRow; i++){
			if (row[i].containsKey(colIdx)){
				double value = row[i].get(colIdx);
				if (value !=0 ){
					sum += value;
				}
			}
		}
		return sum;
	}	
	
	public Vector<Integer> getSortedRowIndex(int row, int n){
		Vector<Integer> sortedList = new Vector<Integer>();
		
		for(int i=0 ; i < n ; i++){
			double maxValue = Double.MIN_VALUE;
			int maxIndex = -1;
			for(int col=0 ; col<numOfColumn ; col++){
				if(getValue(row, col) > maxValue){
					boolean exist = false;
					for(int j=0 ; j<sortedList.size(); j++){
						if (sortedList.get(j) == col){
							exist = true;
							break;
						}
					}
					if(!exist){
						maxValue = getValue(row, col);
						maxIndex = col;
					}
				}
			}
			sortedList.add(maxIndex);
		}
		
		return sortedList;
	}

	public Vector<Integer> getSortedColIndex(int col, int n){
		Vector<Integer> sortedList = new Vector<Integer>();
		
		for(int i=0 ; i < n ; i++){
			double maxValue = Double.MIN_VALUE;
			int maxIndex = -1;
			for(int row=0 ; row<numOfRow ; row++){
				if(getValue(row, col) > maxValue){
					boolean exist = false;
					for(int j=0 ; j<sortedList.size(); j++){
						if (sortedList.get(j) == row){
							exist = true;
							break;
						}
					}
					if(!exist){
						maxValue = getValue(row, col);
						maxIndex = row;
					}
				}
			}
			sortedList.add(maxIndex);
		}
		
		return sortedList;
	}
	
	public void writeMatrixToCSVFile(String outputFilePath) throws Exception{
		PrintWriter out = new PrintWriter(new FileWriter(new File(outputFilePath)));
		
		for(int row=0; row < numOfRow ; row++){
			for(int col=0; col < numOfColumn ; col++){
				if(col == 0) out.print(getValue(row, col));
				else out.print(","+getValue(row, col));
			}
			out.println();
		}

		out.close();
	}
	
	public DoubleSparseMatrix copy() {
		// TODO Auto-generated method stub
		DoubleSparseMatrix temp = new DoubleSparseMatrix(this.numOfRow, this.numOfColumn);
		
		for(int row=0; row < numOfRow ; row++){
			for(int col=0; col < numOfColumn ; col++){
				temp.setValue(row, col, this.getValue(row, col));
			}
		}
		
		return temp;
	}
	
	public List<Double> getRowList(int row){
		List<Double> list = new ArrayList<Double>();
		
		for(int i=0; i<numOfColumn; i++){
			list.add(getValue(row, i));
		}
		return list;
	}

	public List<Double> getColList(int col){
		List<Double> list = new ArrayList<Double>();
		
		for(int i=0; i<numOfRow; i++){
			list.add(getValue(i, col));
		}
		return list;
	}
	
}
